// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tc_redirect

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTc_redirect returns the embedded CollectionSpec for tc_redirect.
func loadTc_redirect() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Tc_redirectBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tc_redirect: %w", err)
	}

	return spec, err
}

// loadTc_redirectObjects loads tc_redirect and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tc_redirectObjects
//	*tc_redirectPrograms
//	*tc_redirectMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTc_redirectObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTc_redirect()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tc_redirectSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_redirectSpecs struct {
	tc_redirectProgramSpecs
	tc_redirectMapSpecs
}

// tc_redirectSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_redirectProgramSpecs struct {
	Tcdump *ebpf.ProgramSpec `ebpf:"tcdump"`
}

// tc_redirectMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_redirectMapSpecs struct {
	DestMap *ebpf.MapSpec `ebpf:"dest_map"`
}

// tc_redirectObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTc_redirectObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_redirectObjects struct {
	tc_redirectPrograms
	tc_redirectMaps
}

func (o *tc_redirectObjects) Close() error {
	return _Tc_redirectClose(
		&o.tc_redirectPrograms,
		&o.tc_redirectMaps,
	)
}

// tc_redirectMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTc_redirectObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_redirectMaps struct {
	DestMap *ebpf.Map `ebpf:"dest_map"`
}

func (m *tc_redirectMaps) Close() error {
	return _Tc_redirectClose(
		m.DestMap,
	)
}

// tc_redirectPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTc_redirectObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_redirectPrograms struct {
	Tcdump *ebpf.Program `ebpf:"tcdump"`
}

func (p *tc_redirectPrograms) Close() error {
	return _Tc_redirectClose(
		p.Tcdump,
	)
}

func _Tc_redirectClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tc_redirect_bpfel.o
var _Tc_redirectBytes []byte
