// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package xdp_ack

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdp_ack returns the embedded CollectionSpec for xdp_ack.
func loadXdp_ack() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_ackBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_ack: %w", err)
	}

	return spec, err
}

// loadXdp_ackObjects loads xdp_ack and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_ackObjects
//	*xdp_ackPrograms
//	*xdp_ackMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_ackObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_ack()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_ackSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_ackSpecs struct {
	xdp_ackProgramSpecs
	xdp_ackMapSpecs
}

// xdp_ackSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_ackProgramSpecs struct {
	XdpAck *ebpf.ProgramSpec `ebpf:"xdp_ack"`
}

// xdp_ackMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_ackMapSpecs struct {
}

// xdp_ackObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_ackObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_ackObjects struct {
	xdp_ackPrograms
	xdp_ackMaps
}

func (o *xdp_ackObjects) Close() error {
	return _Xdp_ackClose(
		&o.xdp_ackPrograms,
		&o.xdp_ackMaps,
	)
}

// xdp_ackMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_ackObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_ackMaps struct {
}

func (m *xdp_ackMaps) Close() error {
	return _Xdp_ackClose()
}

// xdp_ackPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_ackObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_ackPrograms struct {
	XdpAck *ebpf.Program `ebpf:"xdp_ack"`
}

func (p *xdp_ackPrograms) Close() error {
	return _Xdp_ackClose(
		p.XdpAck,
	)
}

func _Xdp_ackClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_ack_bpfel.o
var _Xdp_ackBytes []byte
