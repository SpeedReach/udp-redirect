// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package tc_sequencer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTc_sequencer returns the embedded CollectionSpec for tc_sequencer.
func loadTc_sequencer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Tc_sequencerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tc_sequencer: %w", err)
	}

	return spec, err
}

// loadTc_sequencerObjects loads tc_sequencer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tc_sequencerObjects
//	*tc_sequencerPrograms
//	*tc_sequencerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTc_sequencerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTc_sequencer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tc_sequencerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_sequencerSpecs struct {
	tc_sequencerProgramSpecs
	tc_sequencerMapSpecs
}

// tc_sequencerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_sequencerProgramSpecs struct {
	Tcdump *ebpf.ProgramSpec `ebpf:"tcdump"`
}

// tc_sequencerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tc_sequencerMapSpecs struct {
	CounterMap *ebpf.MapSpec `ebpf:"counter_map"`
	DestMap    *ebpf.MapSpec `ebpf:"dest_map"`
}

// tc_sequencerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTc_sequencerObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_sequencerObjects struct {
	tc_sequencerPrograms
	tc_sequencerMaps
}

func (o *tc_sequencerObjects) Close() error {
	return _Tc_sequencerClose(
		&o.tc_sequencerPrograms,
		&o.tc_sequencerMaps,
	)
}

// tc_sequencerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTc_sequencerObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_sequencerMaps struct {
	CounterMap *ebpf.Map `ebpf:"counter_map"`
	DestMap    *ebpf.Map `ebpf:"dest_map"`
}

func (m *tc_sequencerMaps) Close() error {
	return _Tc_sequencerClose(
		m.CounterMap,
		m.DestMap,
	)
}

// tc_sequencerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTc_sequencerObjects or ebpf.CollectionSpec.LoadAndAssign.
type tc_sequencerPrograms struct {
	Tcdump *ebpf.Program `ebpf:"tcdump"`
}

func (p *tc_sequencerPrograms) Close() error {
	return _Tc_sequencerClose(
		p.Tcdump,
	)
}

func _Tc_sequencerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tc_sequencer_bpfel.o
var _Tc_sequencerBytes []byte
